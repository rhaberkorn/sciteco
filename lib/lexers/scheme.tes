! AUTO-GENERATED FROM SCITE PROPERTY SET !

@[lexer.test.scheme]{
  :EN*.scmQ*"S -1 '
  :EN*.smdQ*"S -1 '
  :EN*.ssQ*
}

@[lexer.set.scheme]{
  ESSETILEXERlisp
  0ESSETKEYWORDS
    + - * / = < > <= >= => abs acos and angle append apply asin assoc assoc assq
    assv atan begin boolean? caar cadr call-with-current-continuation call/cc
    call-with-input-file call-with-output-file call-with-values car cdr caar cadr cdar cddr caaar
    caadr cadar caddr cdaar cdadr cddar cdddr caaaar caaadr caadar caaddr cadaar
    cadadr caddar cadddr cdaaar cdaadr cdadar cdaddr cddaar cddadr cdddar cddddr case
    ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=?
    char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase
    char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port
    close-output-port complex? cond cons cos current-input-port current-output-port define
    define-syntax delay denominator display do dynamic-wind else eof-object? eq? equal? eqv?
    eval even? exact->inexact exact? exp expt floor for-each force gcd if imag-part
    inexact->exact inexact? input-port? integer->char integer? interaction-environment lambda
    lcm length let let* let-syntax letrec letrec-syntax list list->string
    list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular
    make-string make-vector map max member memq memv min modulo negative? newline not
    null-environment null? number->string number? numerator odd? open-input-file open-output-file
    or output-port? pair? peek-char input-port? output-port? positive? procedure?
    quasiquote quote quotient rational? rationalize read read-char real-part real?
    remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt
    string string->list string->number string->symbol string-append string-ci<=?
    string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length
    string-ref string-set! string<=? string<? string=? string>=? string>? string? substring
    symbol->string symbol? syntax-rules transcript-off transcript-on truncate unquote
    unquote-splicing values vector vector->list vector-fill! vector-length vector-ref vector-set!
    vector? with-input-from-file with-output-to-file write write-char zero?
  :M[color.comment],1M[color.set]
  :M[color.number],2M[color.set]
  :M[color.keyword],3M[color.set]
  :M[color.string],6M[color.set]
  :M[color.operator],10M[color.set]
}
