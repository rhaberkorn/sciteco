host=@host@

# `tests` is after `src`, so the target SciTECO is already
# built.
# Using the $BOOTSTRAP_SCITECO wouldn't make sense
# anyway as we don't want to test some preinstalled SciTECO.
SCITECO="@abs_top_builddir@/src/sciteco"

if [ $at_arg_valgrind != false ]; then
	SCITECO="valgrind --tool=memcheck --leak-check=full --error-exitcode=66 $SCITECO"
fi

# Make sure that the standard library from the source package
# is used.
export SCITECOPATH="@abs_top_srcdir@/lib"

# Some test cases may access files from the tests/ source directory.
export srcdir

TECO_INTEGER=@TECO_INTEGER@
SCITECO_VERSION="@PACKAGE_VERSION@"

GREP="@GREP@"

# Glib debug options
export G_SLICE=debug-blocks
export G_ENABLE_DIAGNOSTIC=1

# For the Unicode tests - makes sure that UTF-8 characters
# are accepted on command lines.
case $host in
*-*-darwin*)
	export LC_ALL=`defaults read -g AppleLocale | @SED@ 's/@.*$//g'`.UTF-8
	;;
*)
	export LC_ALL=C.UTF-8
	;;
esac

# Default stack size on Linux (8M).
# Some platforms allow very large stack sizes, making it hard to test
# against potential stack overflows.
ulimit -s 8192
